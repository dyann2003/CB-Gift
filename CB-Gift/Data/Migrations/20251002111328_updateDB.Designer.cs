// <auto-generated />
using System;
using CB_Gift.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CB_Gift.Data.Migrations
{
    [DbContext(typeof(CBGiftDbContext))]
    [Migration("20251002111328_updateDB")]
    partial class updateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CB_Gift.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.DesignerSeller", b =>
                {
                    b.Property<string>("DesignerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SellerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_DesignerSeller_CreatedAt");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DesignerUserId", "SellerUserId");

                    b.HasIndex(new[] { "SellerUserId" }, "IX_DesignerSeller_Seller");

                    b.ToTable("DesignerSeller", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.EndCustomer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Address1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShipState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustId");

                    b.ToTable("EndCustomer", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<bool?>("ActiveTts")
                        .HasColumnType("bit")
                        .HasColumnName("ActiveTTS");

                    b.Property<decimal?>("CostScan")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_Order_CreationDate");

                    b.Property<int>("EndCustomerId")
                        .HasColumnType("int")
                        .HasColumnName("EndCustomerID");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_Order_OrderDate");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SellerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_Order_StatusOrder");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Tracking")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("OrderId");

                    b.HasIndex(new[] { "EndCustomerId" }, "IX_Order_EndCustomerID");

                    b.HasIndex(new[] { "SellerUserId" }, "IX_Order_SellerUserId");

                    b.HasIndex(new[] { "StatusOrder" }, "IX_Order_StatusOrder");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<string>("Accessory")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("AssignedDesignerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_OrderDetail_CreatedDate");

                    b.Property<string>("LinkFileDesign")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LinkImg")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LinkThanksCard")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("NeedDesign")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_OrderDetail_NeedDesign");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex(new[] { "AssignedDesignerUserId" }, "IX_OrderDetail_AssignedDesignerUserId");

                    b.HasIndex(new[] { "NeedDesign" }, "IX_OrderDetail_NeedDesign");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetail_OrderID");

                    b.HasIndex(new[] { "ProductVariantId" }, "IX_OrderDetail_ProductVariantID");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.OrderDetailDesign", b =>
                {
                    b.Property<int>("DesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DesignID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_OrderDetailDesign_CreatedAt");

                    b.Property<string>("DesignerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_OrderDetailDesign_IsFinal");

                    b.Property<string>("Note")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    b.HasKey("DesignId")
                        .HasName("PK__OrderDet__32B8E17F610ED9F4");

                    b.HasIndex(new[] { "DesignerUserId", "CreatedAt" }, "IX_ODDesign_Designer");

                    b.HasIndex(new[] { "OrderDetailId" }, "IX_ODDesign_OrderDetailID");

                    b.HasIndex(new[] { "OrderDetailId" }, "UX_ODDesign_Final")
                        .IsUnique()
                        .HasFilter("([IsFinal]=(1))");

                    b.ToTable("OrderDetailDesign", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.OrderStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameVi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("ApproveByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDatePlan")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StopDatePlan")
                        .HasColumnType("datetime");

                    b.HasKey("PlanId");

                    b.HasIndex(new[] { "ApproveByUserId" }, "IX_Plans_ApproveByUserId");

                    b.HasIndex(new[] { "CreateByUserId" }, "IX_Plans_CreateByUserId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("CB_Gift.Models.PlanDetail", b =>
                {
                    b.Property<int>("PlanDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanDetailId"));

                    b.Property<int?>("NumberOfFinishedProducts")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<int?>("StatusOrder")
                        .HasColumnType("int");

                    b.HasKey("PlanDetailId");

                    b.HasIndex(new[] { "OrderDetailId" }, "IX_PlanDetail_OrderDetailID");

                    b.HasIndex(new[] { "PlanId" }, "IX_PlanDetail_PlanID");

                    b.ToTable("PlanDetail", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Describe")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemLink")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Template")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_CategoryID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductVariantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariantId"));

                    b.Property<decimal?>("BaseCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CustomShape")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("ExtraShipping")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("HeightCm")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("HeightCM");

                    b.Property<string>("Layer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("LengthCm")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("LengthCM");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal?>("ShipCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SizeInch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sku")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("SKU");

                    b.Property<string>("ThicknessMm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ThicknessMM");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("WeightGram")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("WidthCm")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("WidthCM");

                    b.HasKey("ProductVariantId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductVariant_ProductID");

                    b.ToTable("ProductVariant", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Qc", b =>
                {
                    b.Property<int>("QccheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QCCheckID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QccheckId"));

                    b.Property<string>("CheckedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CheckedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasAnnotation("Relational:DefaultConstraintName", "DF_QC_CheckedDate");

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int")
                        .HasColumnName("PlanDetailID");

                    b.Property<int?>("QuantityChecked")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityFailed")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityPassed")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("QccheckId");

                    b.HasIndex(new[] { "CheckedByUserId" }, "IX_QC_CheckedByUserId");

                    b.HasIndex(new[] { "PlanDetailId" }, "IX_QC_PlanDetailID");

                    b.ToTable("QC", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Tag", b =>
                {
                    b.Property<int>("TagsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagsId"));

                    b.Property<string>("TagCode")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagsId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TagsProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("TagsId")
                        .HasColumnType("int")
                        .HasColumnName("TagsID");

                    b.HasKey("ProductId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("Tags_Product", (string)null);
                });

            modelBuilder.Entity("CB_Gift.Models.Order", b =>
                {
                    b.HasOne("CB_Gift.Models.EndCustomer", "EndCustomer")
                        .WithMany("Orders")
                        .HasForeignKey("EndCustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_EndCustomer");

                    b.HasOne("CB_Gift.Models.OrderStatus", "StatusOrderNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrder")
                        .IsRequired()
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.Navigation("EndCustomer");

                    b.Navigation("StatusOrderNavigation");
                });

            modelBuilder.Entity("CB_Gift.Models.OrderDetail", b =>
                {
                    b.HasOne("CB_Gift.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("CB_Gift.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Variant");

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("CB_Gift.Models.OrderDetailDesign", b =>
                {
                    b.HasOne("CB_Gift.Models.OrderDetail", "OrderDetail")
                        .WithOne("OrderDetailDesign")
                        .HasForeignKey("CB_Gift.Models.OrderDetailDesign", "OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ODDesign_OrderDetail");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("CB_Gift.Models.PlanDetail", b =>
                {
                    b.HasOne("CB_Gift.Models.OrderDetail", "OrderDetail")
                        .WithMany("PlanDetails")
                        .HasForeignKey("OrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanDetail_OrderDetail");

                    b.HasOne("CB_Gift.Models.Plan", "Plan")
                        .WithMany("PlanDetails")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanDetail_Plan");

                    b.Navigation("OrderDetail");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("CB_Gift.Models.Product", b =>
                {
                    b.HasOne("CB_Gift.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CB_Gift.Models.ProductVariant", b =>
                {
                    b.HasOne("CB_Gift.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Variant_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CB_Gift.Models.Qc", b =>
                {
                    b.HasOne("CB_Gift.Models.PlanDetail", "PlanDetail")
                        .WithMany("Qcs")
                        .HasForeignKey("PlanDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_QC_PlanDetail");

                    b.Navigation("PlanDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CB_Gift.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CB_Gift.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CB_Gift.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CB_Gift.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagsProduct", b =>
                {
                    b.HasOne("CB_Gift.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tags_Product_Product");

                    b.HasOne("CB_Gift.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tags_Product_Tags");
                });

            modelBuilder.Entity("CB_Gift.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CB_Gift.Models.EndCustomer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CB_Gift.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("CB_Gift.Models.OrderDetail", b =>
                {
                    b.Navigation("OrderDetailDesign");

                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("CB_Gift.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CB_Gift.Models.Plan", b =>
                {
                    b.Navigation("PlanDetails");
                });

            modelBuilder.Entity("CB_Gift.Models.PlanDetail", b =>
                {
                    b.Navigation("Qcs");
                });

            modelBuilder.Entity("CB_Gift.Models.Product", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("CB_Gift.Models.ProductVariant", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
